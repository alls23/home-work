spring:
  kafka:
    producer:
        bootstrap-servers: localhost:9092
        key-serializer: org.apache.kafka.common.serialization.StringSerializer
        value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
    consumer:
        bootstrap-servers: localhost:9092
        group-id: parking-service
        auto-offset-reset: earliest
        key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
        value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
        properties:
          spring:
            json:
              trusted:
                packages: '*'

  r2dbc:
    url: r2dbc:postgresql://localhost:5439/public
    username: postgres
    password: postgres
  webflux:
    multipart:
      max-parts: 5
      max-disk-usage-per-part: 10485760 # 10MB
  application:
    name: parking-service
  main:
    allow-bean-definition-overriding: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8082/realms/demo
          jwk-set-uri: http://localhost:8082/realms/demo/protocol/openid-connect/certs

keycloak:
  realm: demo
  username: admin
  password: admin
  grant_type_password: password
  secret: IWLSnakHG8aNTWNaWuSj0a11UY4lzxd9
  client_id: spring-with-test-scope
  login-url: /realms/demo/protocol/openid-connect/token
  base-url: http://localhost:8082

server:
  port: 8085

eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8761/eureka

kafka:
  topics:
    parking: parking
    transaction: transaction
  group-ids:
    parking-service: parking-service
#logging:
#  level:
#    root: DEBUG