version: "3.8"

services:
  account-service:
    build: ./account
    ports:
      - "8081:8081"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
      - spring.security.oauth2.resourceserver.jwt.issue-uri=http://keycloak:8080/realms/demo
      - keycloak.base-url=http://keycloak:8080
      - r2dbc.url=r2dbc:postgresql://account-db:5432/account
      - s3.endpoint=http://localstack:4566
    depends_on:
      - service-discovery
      - account-db

  parking-service:
    build: ./parking
    ports:
      - "8085:8085"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
      - spring.security.oauth2.resourceserver.jwt.issue-uri=http://keycloak:8080/realms/demo
      - keycloak.base-url=http://keycloak:8080
      - r2dbc.url=r2dbc:postgresql://parking-db:5432/public
    depends_on:
      - service-discovery
      - parking-db

  service-discovery:
    build: ./service-discovery
    ports:
      - "8761:8761"

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/demo
    depends_on:
      keycloak:
        condition: service_healthy

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    healthcheck:
      test: [ 'CMD-SHELL', '[ -f /tmp/HealthCheck.java ] || echo "public class HealthCheck { public static void main(String[] args) throws java.lang.Throwable { System.exit(java.net.HttpURLConnection.HTTP_OK == ((java.net.HttpURLConnection)new java.net.URL(args[0]).openConnection()).getResponseCode() ? 0 : 1); } }" > /tmp/HealthCheck.java && java /tmp/HealthCheck.java http://localhost:8080/health/live' ]
      interval: 5s
      timeout: 5s
      retries: 30
    volumes:
      - ./local/keycloak:/opt/keycloak/data/import
    command: start-dev --import-realm
    environment:
      KC_HEALTH_ENABLED: true
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8082:8080"

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4567:4566"
    environment:
      - DEBUG=1
      - AWS_ACCESS_KEY_ID=demo
      - AWS_SECRET_ACCESS_KEY=demo
      - ALLOW_NONSTANDARD_REGIONS=1
      - AWS_DEFAULT_REGION=us-east-1 # This is the region where your localstack mocks to be running
      - DOCKER_HOST=unix:///var/run/docker.sock
    user:
      root
    command:
      -c "chmod a+x /etc/localstack/init/ready.d"
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - /var/run/docker.sock:/var/run/docker.sock
      # init script can create problems with CRLF(line separator), it should be LF, check container logs
      - ./account/local/aws/init-aws/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh

  account-db:
    image: postgres:15.1
    command: [ "postgres", "-c", "log_statement=all" ]
    ports:
      - "5438:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: public
      PGDATA: /data/postgres
    volumes:
      - ./account/local/db:/docker-entrypoint-initdb.d

  parking-db:
    image: postgres:15.1
    command: [ "postgres", "-c", "log_statement=all" ]
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: public
      PGDATA: /data/postgres
    volumes:
      - ./account/local/db:/docker-entrypoint-initdb.d
  zoo:
    image: zookeeper:3.4.9
    hostname: zoo
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: server.1=zoo:2888:3888
    volumes:
      - ./zk-single-kafka-multiple/zoo/data:/data
      - ./zk-single-kafka-multiple/zoo/datalog:/datalog

  kafka1:
      image: confluentinc/cp-kafka:5.3.0
      hostname: kafka1
      ports:
        - "9092:9092"
      environment:
        KAFKA_ADVERTISED_LISTENERS: LISTENER_DOCKER_INTERNAL://kafka1:19092,LISTENER_DOCKER_EXTERNAL://${DOCKER_HOST_IP:-127.0.0.1}:9092
        KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: LISTENER_DOCKER_INTERNAL:PLAINTEXT,LISTENER_DOCKER_EXTERNAL:PLAINTEXT
        KAFKA_INTER_BROKER_LISTENER_NAME: LISTENER_DOCKER_INTERNAL
        KAFKA_ZOOKEEPER_CONNECT: "zoo:2181"
        KAFKA_BROKER_ID: 1
        KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
        KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      volumes:
        - ./zk-single-kafka-multiple/kafka1/data:/var/lib/kafka/data
      depends_on:
        - zoo

  manager:
      image: sheepkiller/kafka-manager
      ports:
        - 9000:9000
      environment:
        - ZK_HOSTS=zoo:2181
      depends_on:
        - zoo

