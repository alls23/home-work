version: "3.8"

services:
  account-service:
    build: ./account
    ports:
      - "8081:8081"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
      - spring.security.oauth2.resourceserver.jwt.issue-uri=http://keycloak:8080/realms/demo
      - keycloak.base-url=http://keycloak:8080
      - r2dbc.url=r2dbc:postgresql://account-db:5432/account
      - s3.endpoint=http://localstack:4566
    depends_on:
      - service-discovery
      - account-db

  parking-service:
    build: ./parking
    ports:
      - "8085:8085"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
      - spring.security.oauth2.resourceserver.jwt.issue-uri=http://keycloak:8080/realms/demo
      - keycloak.base-url=http://keycloak:8080
      - r2dbc.url=r2dbc:postgresql://parking-db:5432/public
    depends_on:
      - service-discovery
      - parking-db

  service-discovery:
    build: ./service-discovery
    ports:
      - "8761:8761"

  api-gateway:
    build: ./api-gateway
    ports:
      - "8080:8080"
    environment:
      - eureka.client.serviceUrl.defaultZone=http://service-discovery:8761/eureka
      - spring.security.oauth2.resourceserver.jwt.jwk-set-uri=http://keycloak:8080/realms/demo/protocol/openid-connect/certs
      - spring.security.oauth2.client.provider.keycloak.issuer-uri=http://keycloak:8080/realms/demo
    depends_on:
      - service-discovery
      - account-service
      - keycloak

  keycloak:
    image: quay.io/keycloak/keycloak:23.0.7
    command:
      - start-dev
    environment:
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    ports:
      - "8082:8080"

  localstack:
    image: localstack/localstack:latest
    ports:
      - "4567:4566"
    environment:
      - DEBUG=1
      - AWS_ACCESS_KEY_ID=demo
      - AWS_SECRET_ACCESS_KEY=demo
      - ALLOW_NONSTANDARD_REGIONS=1
      - AWS_DEFAULT_REGION=us-east-1 # This is the region where your localstack mocks to be running
      - DOCKER_HOST=unix:///var/run/docker.sock
    user:
      root
    command:
      -c "chmod a+x /etc/localstack/init/ready.d"
    volumes:
      - "${LOCALSTACK_VOLUME_DIR:-./volume}:/var/lib/localstack"
      - /var/run/docker.sock:/var/run/docker.sock
      # init script can create problems with CRLF(line separator), it should be LF, check container logs
      - ./account/local/aws/init-aws/init-aws.sh:/etc/localstack/init/ready.d/init-aws.sh

  account-db:
    image: postgres:15.1
    command: [ "postgres", "-c", "log_statement=all" ]
    ports:
      - "5438:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: public
      PGDATA: /data/postgres
    volumes:
      - ./account/local/db:/docker-entrypoint-initdb.d

  parking-db:
    image: postgres:15.1
    command: [ "postgres", "-c", "log_statement=all" ]
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: public
      PGDATA: /data/postgres
    volumes:
      - ./account/local/db:/docker-entrypoint-initdb.d

